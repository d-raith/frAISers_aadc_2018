/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "voice_control_thrift_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace control_thrift {

int _kMessageOpValues[] = {
  MessageOp::DRIVE,
  MessageOp::PAUSE,
  MessageOp::CONTINUE,
  MessageOp::STOP,
  MessageOp::RETURN_TO_START,
  MessageOp::ABORT,
  MessageOp::PLAN,
  MessageOp::COMPUTE_COSTS
};
const char* _kMessageOpNames[] = {
  "DRIVE",
  "PAUSE",
  "CONTINUE",
  "STOP",
  "RETURN_TO_START",
  "ABORT",
  "PLAN",
  "COMPUTE_COSTS"
};
const std::map<int, const char*> _MessageOp_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kMessageOpValues, _kMessageOpNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const MessageOp::type& val) {
  std::map<int, const char*>::const_iterator it = _MessageOp_VALUES_TO_NAMES.find(val);
  if (it != _MessageOp_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

int _kCarStatusValues[] = {
  CarStatus::READY,
  CarStatus::ON_ROUTE,
  CarStatus::PAUSED,
  CarStatus::WAITING_FOR_INTERACTION,
  CarStatus::ERROR,
  CarStatus::UNINITIALIZED,
  CarStatus::NO_ROUTE_FOUND
};
const char* _kCarStatusNames[] = {
  "READY",
  "ON_ROUTE",
  "PAUSED",
  "WAITING_FOR_INTERACTION",
  "ERROR",
  "UNINITIALIZED",
  "NO_ROUTE_FOUND"
};
const std::map<int, const char*> _CarStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kCarStatusValues, _kCarStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const CarStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _CarStatus_VALUES_TO_NAMES.find(val);
  if (it != _CarStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


Point3D::~Point3D() throw() {
}


void Point3D::__set_x(const double val) {
  this->x = val;
}

void Point3D::__set_y(const double val) {
  this->y = val;
}

void Point3D::__set_z(const double val) {
  this->z = val;
}
std::ostream& operator<<(std::ostream& out, const Point3D& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Point3D::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_x = false;
  bool isset_y = false;
  bool isset_z = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          isset_x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          isset_y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          isset_z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_x)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_y)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_z)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Point3D::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Point3D");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Point3D &a, Point3D &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
}

Point3D::Point3D(const Point3D& other0) {
  x = other0.x;
  y = other0.y;
  z = other0.z;
}
Point3D& Point3D::operator=(const Point3D& other1) {
  x = other1.x;
  y = other1.y;
  z = other1.z;
  return *this;
}
void Point3D::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Point3D(";
  out << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "z=" << to_string(z);
  out << ")";
}


ControlMessage::~ControlMessage() throw() {
}


void ControlMessage::__set_op(const MessageOp::type val) {
  this->op = val;
}

void ControlMessage::__set_car_id(const int8_t val) {
  this->car_id = val;
}

void ControlMessage::__set_p(const Point3D& val) {
  this->p = val;
}

void ControlMessage::__set_extra(const std::string& val) {
  this->extra = val;
}
std::ostream& operator<<(std::ostream& out, const ControlMessage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ControlMessage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_op = false;
  bool isset_car_id = false;
  bool isset_p = false;
  bool isset_extra = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->op = (MessageOp::type)ecast2;
          isset_op = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->car_id);
          isset_car_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->p.read(iprot);
          isset_p = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extra);
          isset_extra = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_op)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_car_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_p)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_extra)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ControlMessage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ControlMessage");

  xfer += oprot->writeFieldBegin("op", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->op);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("car_id", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->car_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->p.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->extra);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ControlMessage &a, ControlMessage &b) {
  using ::std::swap;
  swap(a.op, b.op);
  swap(a.car_id, b.car_id);
  swap(a.p, b.p);
  swap(a.extra, b.extra);
}

ControlMessage::ControlMessage(const ControlMessage& other3) {
  op = other3.op;
  car_id = other3.car_id;
  p = other3.p;
  extra = other3.extra;
}
ControlMessage& ControlMessage::operator=(const ControlMessage& other4) {
  op = other4.op;
  car_id = other4.car_id;
  p = other4.p;
  extra = other4.extra;
  return *this;
}
void ControlMessage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ControlMessage(";
  out << "op=" << to_string(op);
  out << ", " << "car_id=" << to_string(car_id);
  out << ", " << "p=" << to_string(p);
  out << ", " << "extra=" << to_string(extra);
  out << ")";
}

} // namespace
