/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef voice_control_thrift_TYPES_H
#define voice_control_thrift_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace control_thrift {

struct MessageOp {
  enum type {
    DRIVE = 1,
    PAUSE = 2,
    CONTINUE = 3,
    STOP = 4,
    RETURN_TO_START = 5,
    ABORT = 6,
    PLAN = 7,
    COMPUTE_COSTS = 8
  };
};

extern const std::map<int, const char*> _MessageOp_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const MessageOp::type& val);

struct CarStatus {
  enum type {
    READY = 1,
    ON_ROUTE = 2,
    PAUSED = 3,
    WAITING_FOR_INTERACTION = 4,
    ERROR = 5,
    UNINITIALIZED = 6,
    NO_ROUTE_FOUND = 7
  };
};

extern const std::map<int, const char*> _CarStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const CarStatus::type& val);

typedef int64_t int64;

class Point3D;

class ControlMessage;


class Point3D : public virtual ::apache::thrift::TBase {
 public:

  Point3D(const Point3D&);
  Point3D& operator=(const Point3D&);
  Point3D() : x(0), y(0), z(0) {
  }

  virtual ~Point3D() throw();
  double x;
  double y;
  double z;

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_z(const double val);

  bool operator == (const Point3D & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const Point3D &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Point3D & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Point3D &a, Point3D &b);

std::ostream& operator<<(std::ostream& out, const Point3D& obj);


class ControlMessage : public virtual ::apache::thrift::TBase {
 public:

  ControlMessage(const ControlMessage&);
  ControlMessage& operator=(const ControlMessage&);
  ControlMessage() : op((MessageOp::type)0), car_id(0), extra() {
  }

  virtual ~ControlMessage() throw();
  MessageOp::type op;
  int8_t car_id;
  Point3D p;
  std::string extra;

  void __set_op(const MessageOp::type val);

  void __set_car_id(const int8_t val);

  void __set_p(const Point3D& val);

  void __set_extra(const std::string& val);

  bool operator == (const ControlMessage & rhs) const
  {
    if (!(op == rhs.op))
      return false;
    if (!(car_id == rhs.car_id))
      return false;
    if (!(p == rhs.p))
      return false;
    if (!(extra == rhs.extra))
      return false;
    return true;
  }
  bool operator != (const ControlMessage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControlMessage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ControlMessage &a, ControlMessage &b);

std::ostream& operator<<(std::ostream& out, const ControlMessage& obj);

} // namespace

#endif
