/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ControlComm_H
#define ControlComm_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "voice_control_thrift_types.h"

namespace control_thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ControlCommIf {
 public:
  virtual ~ControlCommIf() {}
  virtual void ping() = 0;
  virtual CarStatus::type sendCommand(const ControlMessage& command) = 0;
  virtual CarStatus::type getCarStatus() = 0;
  virtual double getRouteCosts(const ControlMessage& command) = 0;
};

class ControlCommIfFactory {
 public:
  typedef ControlCommIf Handler;

  virtual ~ControlCommIfFactory() {}

  virtual ControlCommIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ControlCommIf* /* handler */) = 0;
};

class ControlCommIfSingletonFactory : virtual public ControlCommIfFactory {
 public:
  ControlCommIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ControlCommIf>& iface) : iface_(iface) {}
  virtual ~ControlCommIfSingletonFactory() {}

  virtual ControlCommIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ControlCommIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ControlCommIf> iface_;
};

class ControlCommNull : virtual public ControlCommIf {
 public:
  virtual ~ControlCommNull() {}
  void ping() {
    return;
  }
  CarStatus::type sendCommand(const ControlMessage& /* command */) {
    CarStatus::type _return = (CarStatus::type)0;
    return _return;
  }
  CarStatus::type getCarStatus() {
    CarStatus::type _return = (CarStatus::type)0;
    return _return;
  }
  double getRouteCosts(const ControlMessage& /* command */) {
    double _return = (double)0;
    return _return;
  }
};


class ControlComm_ping_args {
 public:

  ControlComm_ping_args(const ControlComm_ping_args&);
  ControlComm_ping_args& operator=(const ControlComm_ping_args&);
  ControlComm_ping_args() {
  }

  virtual ~ControlComm_ping_args() throw();

  bool operator == (const ControlComm_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ControlComm_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControlComm_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControlComm_ping_pargs {
 public:


  virtual ~ControlComm_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControlComm_ping_result {
 public:

  ControlComm_ping_result(const ControlComm_ping_result&);
  ControlComm_ping_result& operator=(const ControlComm_ping_result&);
  ControlComm_ping_result() {
  }

  virtual ~ControlComm_ping_result() throw();

  bool operator == (const ControlComm_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ControlComm_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControlComm_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControlComm_ping_presult {
 public:


  virtual ~ControlComm_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControlComm_sendCommand_args__isset {
  _ControlComm_sendCommand_args__isset() : command(false) {}
  bool command :1;
} _ControlComm_sendCommand_args__isset;

class ControlComm_sendCommand_args {
 public:

  ControlComm_sendCommand_args(const ControlComm_sendCommand_args&);
  ControlComm_sendCommand_args& operator=(const ControlComm_sendCommand_args&);
  ControlComm_sendCommand_args() {
  }

  virtual ~ControlComm_sendCommand_args() throw();
  ControlMessage command;

  _ControlComm_sendCommand_args__isset __isset;

  void __set_command(const ControlMessage& val);

  bool operator == (const ControlComm_sendCommand_args & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    return true;
  }
  bool operator != (const ControlComm_sendCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControlComm_sendCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControlComm_sendCommand_pargs {
 public:


  virtual ~ControlComm_sendCommand_pargs() throw();
  const ControlMessage* command;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControlComm_sendCommand_result__isset {
  _ControlComm_sendCommand_result__isset() : success(false) {}
  bool success :1;
} _ControlComm_sendCommand_result__isset;

class ControlComm_sendCommand_result {
 public:

  ControlComm_sendCommand_result(const ControlComm_sendCommand_result&);
  ControlComm_sendCommand_result& operator=(const ControlComm_sendCommand_result&);
  ControlComm_sendCommand_result() : success((CarStatus::type)0) {
  }

  virtual ~ControlComm_sendCommand_result() throw();
  CarStatus::type success;

  _ControlComm_sendCommand_result__isset __isset;

  void __set_success(const CarStatus::type val);

  bool operator == (const ControlComm_sendCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControlComm_sendCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControlComm_sendCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControlComm_sendCommand_presult__isset {
  _ControlComm_sendCommand_presult__isset() : success(false) {}
  bool success :1;
} _ControlComm_sendCommand_presult__isset;

class ControlComm_sendCommand_presult {
 public:


  virtual ~ControlComm_sendCommand_presult() throw();
  CarStatus::type* success;

  _ControlComm_sendCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ControlComm_getCarStatus_args {
 public:

  ControlComm_getCarStatus_args(const ControlComm_getCarStatus_args&);
  ControlComm_getCarStatus_args& operator=(const ControlComm_getCarStatus_args&);
  ControlComm_getCarStatus_args() {
  }

  virtual ~ControlComm_getCarStatus_args() throw();

  bool operator == (const ControlComm_getCarStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ControlComm_getCarStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControlComm_getCarStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControlComm_getCarStatus_pargs {
 public:


  virtual ~ControlComm_getCarStatus_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControlComm_getCarStatus_result__isset {
  _ControlComm_getCarStatus_result__isset() : success(false) {}
  bool success :1;
} _ControlComm_getCarStatus_result__isset;

class ControlComm_getCarStatus_result {
 public:

  ControlComm_getCarStatus_result(const ControlComm_getCarStatus_result&);
  ControlComm_getCarStatus_result& operator=(const ControlComm_getCarStatus_result&);
  ControlComm_getCarStatus_result() : success((CarStatus::type)0) {
  }

  virtual ~ControlComm_getCarStatus_result() throw();
  CarStatus::type success;

  _ControlComm_getCarStatus_result__isset __isset;

  void __set_success(const CarStatus::type val);

  bool operator == (const ControlComm_getCarStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControlComm_getCarStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControlComm_getCarStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControlComm_getCarStatus_presult__isset {
  _ControlComm_getCarStatus_presult__isset() : success(false) {}
  bool success :1;
} _ControlComm_getCarStatus_presult__isset;

class ControlComm_getCarStatus_presult {
 public:


  virtual ~ControlComm_getCarStatus_presult() throw();
  CarStatus::type* success;

  _ControlComm_getCarStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ControlComm_getRouteCosts_args__isset {
  _ControlComm_getRouteCosts_args__isset() : command(false) {}
  bool command :1;
} _ControlComm_getRouteCosts_args__isset;

class ControlComm_getRouteCosts_args {
 public:

  ControlComm_getRouteCosts_args(const ControlComm_getRouteCosts_args&);
  ControlComm_getRouteCosts_args& operator=(const ControlComm_getRouteCosts_args&);
  ControlComm_getRouteCosts_args() {
  }

  virtual ~ControlComm_getRouteCosts_args() throw();
  ControlMessage command;

  _ControlComm_getRouteCosts_args__isset __isset;

  void __set_command(const ControlMessage& val);

  bool operator == (const ControlComm_getRouteCosts_args & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    return true;
  }
  bool operator != (const ControlComm_getRouteCosts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControlComm_getRouteCosts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ControlComm_getRouteCosts_pargs {
 public:


  virtual ~ControlComm_getRouteCosts_pargs() throw();
  const ControlMessage* command;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControlComm_getRouteCosts_result__isset {
  _ControlComm_getRouteCosts_result__isset() : success(false) {}
  bool success :1;
} _ControlComm_getRouteCosts_result__isset;

class ControlComm_getRouteCosts_result {
 public:

  ControlComm_getRouteCosts_result(const ControlComm_getRouteCosts_result&);
  ControlComm_getRouteCosts_result& operator=(const ControlComm_getRouteCosts_result&);
  ControlComm_getRouteCosts_result() : success(0) {
  }

  virtual ~ControlComm_getRouteCosts_result() throw();
  double success;

  _ControlComm_getRouteCosts_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const ControlComm_getRouteCosts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ControlComm_getRouteCosts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ControlComm_getRouteCosts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ControlComm_getRouteCosts_presult__isset {
  _ControlComm_getRouteCosts_presult__isset() : success(false) {}
  bool success :1;
} _ControlComm_getRouteCosts_presult__isset;

class ControlComm_getRouteCosts_presult {
 public:


  virtual ~ControlComm_getRouteCosts_presult() throw();
  double* success;

  _ControlComm_getRouteCosts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ControlCommClient : virtual public ControlCommIf {
 public:
  ControlCommClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ControlCommClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  CarStatus::type sendCommand(const ControlMessage& command);
  void send_sendCommand(const ControlMessage& command);
  CarStatus::type recv_sendCommand();
  CarStatus::type getCarStatus();
  void send_getCarStatus();
  CarStatus::type recv_getCarStatus();
  double getRouteCosts(const ControlMessage& command);
  void send_getRouteCosts(const ControlMessage& command);
  double recv_getRouteCosts();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ControlCommProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ControlCommIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ControlCommProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCarStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRouteCosts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ControlCommProcessor(::apache::thrift::stdcxx::shared_ptr<ControlCommIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &ControlCommProcessor::process_ping;
    processMap_["sendCommand"] = &ControlCommProcessor::process_sendCommand;
    processMap_["getCarStatus"] = &ControlCommProcessor::process_getCarStatus;
    processMap_["getRouteCosts"] = &ControlCommProcessor::process_getRouteCosts;
  }

  virtual ~ControlCommProcessor() {}
};

class ControlCommProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ControlCommProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ControlCommIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ControlCommIfFactory > handlerFactory_;
};

class ControlCommMultiface : virtual public ControlCommIf {
 public:
  ControlCommMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ControlCommIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ControlCommMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ControlCommIf> > ifaces_;
  ControlCommMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ControlCommIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  CarStatus::type sendCommand(const ControlMessage& command) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendCommand(command);
    }
    return ifaces_[i]->sendCommand(command);
  }

  CarStatus::type getCarStatus() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCarStatus();
    }
    return ifaces_[i]->getCarStatus();
  }

  double getRouteCosts(const ControlMessage& command) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRouteCosts(command);
    }
    return ifaces_[i]->getRouteCosts(command);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ControlCommConcurrentClient : virtual public ControlCommIf {
 public:
  ControlCommConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ControlCommConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  CarStatus::type sendCommand(const ControlMessage& command);
  int32_t send_sendCommand(const ControlMessage& command);
  CarStatus::type recv_sendCommand(const int32_t seqid);
  CarStatus::type getCarStatus();
  int32_t send_getCarStatus();
  CarStatus::type recv_getCarStatus(const int32_t seqid);
  double getRouteCosts(const ControlMessage& command);
  int32_t send_getRouteCosts(const ControlMessage& command);
  double recv_getRouteCosts(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
