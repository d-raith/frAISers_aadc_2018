#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class MessageOp(object):
    DRIVE = 1
    PAUSE = 2
    CONTINUE = 3
    STOP = 4
    RETURN_TO_START = 5
    ABORT = 6
    PLAN = 7
    COMPUTE_COSTS = 8

    _VALUES_TO_NAMES = {
        1: "DRIVE",
        2: "PAUSE",
        3: "CONTINUE",
        4: "STOP",
        5: "RETURN_TO_START",
        6: "ABORT",
        7: "PLAN",
        8: "COMPUTE_COSTS",
    }

    _NAMES_TO_VALUES = {
        "DRIVE": 1,
        "PAUSE": 2,
        "CONTINUE": 3,
        "STOP": 4,
        "RETURN_TO_START": 5,
        "ABORT": 6,
        "PLAN": 7,
        "COMPUTE_COSTS": 8,
    }


class CarStatus(object):
    READY = 1
    ON_ROUTE = 2
    PAUSED = 3
    WAITING_FOR_INTERACTION = 4
    ERROR = 5
    UNINITIALIZED = 6
    NO_ROUTE_FOUND = 7

    _VALUES_TO_NAMES = {
        1: "READY",
        2: "ON_ROUTE",
        3: "PAUSED",
        4: "WAITING_FOR_INTERACTION",
        5: "ERROR",
        6: "UNINITIALIZED",
        7: "NO_ROUTE_FOUND",
    }

    _NAMES_TO_VALUES = {
        "READY": 1,
        "ON_ROUTE": 2,
        "PAUSED": 3,
        "WAITING_FOR_INTERACTION": 4,
        "ERROR": 5,
        "UNINITIALIZED": 6,
        "NO_ROUTE_FOUND": 7,
    }


class Point3D(object):
    """
    Attributes:
     - x
     - y
     - z
    """


    def __init__(self, x=None, y=None, z=0,):
        self.x = x
        self.y = y
        self.z = z

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.x = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.y = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.z = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Point3D')
        if self.x is not None:
            oprot.writeFieldBegin('x', TType.DOUBLE, 1)
            oprot.writeDouble(self.x)
            oprot.writeFieldEnd()
        if self.y is not None:
            oprot.writeFieldBegin('y', TType.DOUBLE, 2)
            oprot.writeDouble(self.y)
            oprot.writeFieldEnd()
        if self.z is not None:
            oprot.writeFieldBegin('z', TType.DOUBLE, 3)
            oprot.writeDouble(self.z)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.x is None:
            raise TProtocolException(message='Required field x is unset!')
        if self.y is None:
            raise TProtocolException(message='Required field y is unset!')
        if self.z is None:
            raise TProtocolException(message='Required field z is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ControlMessage(object):
    """
    Attributes:
     - op
     - car_id
     - p
     - extra
    """


    def __init__(self, op=None, car_id=None, p=None, extra=None,):
        self.op = op
        self.car_id = car_id
        self.p = p
        self.extra = extra

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.op = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BYTE:
                    self.car_id = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.p = Point3D()
                    self.p.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.extra = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ControlMessage')
        if self.op is not None:
            oprot.writeFieldBegin('op', TType.I32, 1)
            oprot.writeI32(self.op)
            oprot.writeFieldEnd()
        if self.car_id is not None:
            oprot.writeFieldBegin('car_id', TType.BYTE, 2)
            oprot.writeByte(self.car_id)
            oprot.writeFieldEnd()
        if self.p is not None:
            oprot.writeFieldBegin('p', TType.STRUCT, 3)
            self.p.write(oprot)
            oprot.writeFieldEnd()
        if self.extra is not None:
            oprot.writeFieldBegin('extra', TType.STRING, 4)
            oprot.writeString(self.extra.encode('utf-8') if sys.version_info[0] == 2 else self.extra)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.op is None:
            raise TProtocolException(message='Required field op is unset!')
        if self.car_id is None:
            raise TProtocolException(message='Required field car_id is unset!')
        if self.p is None:
            raise TProtocolException(message='Required field p is unset!')
        if self.extra is None:
            raise TProtocolException(message='Required field extra is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Point3D)
Point3D.thrift_spec = (
    None,  # 0
    (1, TType.DOUBLE, 'x', None, None, ),  # 1
    (2, TType.DOUBLE, 'y', None, None, ),  # 2
    (3, TType.DOUBLE, 'z', None, 0, ),  # 3
)
all_structs.append(ControlMessage)
ControlMessage.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'op', None, None, ),  # 1
    (2, TType.BYTE, 'car_id', None, None, ),  # 2
    (3, TType.STRUCT, 'p', [Point3D, None], None, ),  # 3
    (4, TType.STRING, 'extra', 'UTF8', None, ),  # 4
)
fix_spec(all_structs)
del all_structs
