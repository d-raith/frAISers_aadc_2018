/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef nn_thrift_TYPES_H
#define nn_thrift_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace nn_thrift {

class NNImage;

typedef struct _NNImage__isset {
  _NNImage__isset() : bytes(false) {}
  bool bytes :1;
} _NNImage__isset;

class NNImage : public virtual ::apache::thrift::TBase {
 public:

  NNImage(const NNImage&);
  NNImage& operator=(const NNImage&);
  NNImage() : width(0), height(0), channels(0), bytes() {
  }

  virtual ~NNImage() throw();
  int16_t width;
  int16_t height;
  int8_t channels;
  std::string bytes;

  _NNImage__isset __isset;

  void __set_width(const int16_t val);

  void __set_height(const int16_t val);

  void __set_channels(const int8_t val);

  void __set_bytes(const std::string& val);

  bool operator == (const NNImage & rhs) const
  {
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    if (!(channels == rhs.channels))
      return false;
    if (!(bytes == rhs.bytes))
      return false;
    return true;
  }
  bool operator != (const NNImage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NNImage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NNImage &a, NNImage &b);

std::ostream& operator<<(std::ostream& out, const NNImage& obj);

} // namespace

#endif
