/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "nn_thrift_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace nn_thrift {


NNImage::~NNImage() throw() {
}


void NNImage::__set_width(const int16_t val) {
  this->width = val;
}

void NNImage::__set_height(const int16_t val) {
  this->height = val;
}

void NNImage::__set_channels(const int8_t val) {
  this->channels = val;
}

void NNImage::__set_bytes(const std::string& val) {
  this->bytes = val;
}
std::ostream& operator<<(std::ostream& out, const NNImage& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t NNImage::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_width = false;
  bool isset_height = false;
  bool isset_channels = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->width);
          isset_width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->height);
          isset_height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->channels);
          isset_channels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->bytes);
          this->__isset.bytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_width)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_height)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_channels)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t NNImage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NNImage");

  xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channels", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->channels);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bytes", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->bytes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NNImage &a, NNImage &b) {
  using ::std::swap;
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.channels, b.channels);
  swap(a.bytes, b.bytes);
  swap(a.__isset, b.__isset);
}

NNImage::NNImage(const NNImage& other0) {
  width = other0.width;
  height = other0.height;
  channels = other0.channels;
  bytes = other0.bytes;
  __isset = other0.__isset;
}
NNImage& NNImage::operator=(const NNImage& other1) {
  width = other1.width;
  height = other1.height;
  channels = other1.channels;
  bytes = other1.bytes;
  __isset = other1.__isset;
  return *this;
}
void NNImage::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NNImage(";
  out << "width=" << to_string(width);
  out << ", " << "height=" << to_string(height);
  out << ", " << "channels=" << to_string(channels);
  out << ", " << "bytes=" << to_string(bytes);
  out << ")";
}

} // namespace
