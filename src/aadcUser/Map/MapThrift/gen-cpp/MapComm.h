/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MapComm_H
#define MapComm_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "map_data_structure_types.h"

namespace map_thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MapCommIf {
 public:
  virtual ~MapCommIf() {}
  virtual void ping() = 0;
  virtual bool sendMapMessage(const MapMessage& map_complete) = 0;
  virtual bool sendCarPose(const CarMessage& car_pose) = 0;
  virtual bool sendThriftImage(const ThriftImage& image) = 0;
};

class MapCommIfFactory {
 public:
  typedef MapCommIf Handler;

  virtual ~MapCommIfFactory() {}

  virtual MapCommIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MapCommIf* /* handler */) = 0;
};

class MapCommIfSingletonFactory : virtual public MapCommIfFactory {
 public:
  MapCommIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<MapCommIf>& iface) : iface_(iface) {}
  virtual ~MapCommIfSingletonFactory() {}

  virtual MapCommIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MapCommIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<MapCommIf> iface_;
};

class MapCommNull : virtual public MapCommIf {
 public:
  virtual ~MapCommNull() {}
  void ping() {
    return;
  }
  bool sendMapMessage(const MapMessage& /* map_complete */) {
    bool _return = false;
    return _return;
  }
  bool sendCarPose(const CarMessage& /* car_pose */) {
    bool _return = false;
    return _return;
  }
  bool sendThriftImage(const ThriftImage& /* image */) {
    bool _return = false;
    return _return;
  }
};


class MapComm_ping_args {
 public:

  MapComm_ping_args(const MapComm_ping_args&);
  MapComm_ping_args& operator=(const MapComm_ping_args&);
  MapComm_ping_args() {
  }

  virtual ~MapComm_ping_args() throw();

  bool operator == (const MapComm_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MapComm_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapComm_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapComm_ping_pargs {
 public:


  virtual ~MapComm_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapComm_ping_result {
 public:

  MapComm_ping_result(const MapComm_ping_result&);
  MapComm_ping_result& operator=(const MapComm_ping_result&);
  MapComm_ping_result() {
  }

  virtual ~MapComm_ping_result() throw();

  bool operator == (const MapComm_ping_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MapComm_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapComm_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapComm_ping_presult {
 public:


  virtual ~MapComm_ping_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapComm_sendMapMessage_args__isset {
  _MapComm_sendMapMessage_args__isset() : map_complete(false) {}
  bool map_complete :1;
} _MapComm_sendMapMessage_args__isset;

class MapComm_sendMapMessage_args {
 public:

  MapComm_sendMapMessage_args(const MapComm_sendMapMessage_args&);
  MapComm_sendMapMessage_args& operator=(const MapComm_sendMapMessage_args&);
  MapComm_sendMapMessage_args() {
  }

  virtual ~MapComm_sendMapMessage_args() throw();
  MapMessage map_complete;

  _MapComm_sendMapMessage_args__isset __isset;

  void __set_map_complete(const MapMessage& val);

  bool operator == (const MapComm_sendMapMessage_args & rhs) const
  {
    if (!(map_complete == rhs.map_complete))
      return false;
    return true;
  }
  bool operator != (const MapComm_sendMapMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapComm_sendMapMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapComm_sendMapMessage_pargs {
 public:


  virtual ~MapComm_sendMapMessage_pargs() throw();
  const MapMessage* map_complete;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapComm_sendMapMessage_result__isset {
  _MapComm_sendMapMessage_result__isset() : success(false) {}
  bool success :1;
} _MapComm_sendMapMessage_result__isset;

class MapComm_sendMapMessage_result {
 public:

  MapComm_sendMapMessage_result(const MapComm_sendMapMessage_result&);
  MapComm_sendMapMessage_result& operator=(const MapComm_sendMapMessage_result&);
  MapComm_sendMapMessage_result() : success(0) {
  }

  virtual ~MapComm_sendMapMessage_result() throw();
  bool success;

  _MapComm_sendMapMessage_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const MapComm_sendMapMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MapComm_sendMapMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapComm_sendMapMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapComm_sendMapMessage_presult__isset {
  _MapComm_sendMapMessage_presult__isset() : success(false) {}
  bool success :1;
} _MapComm_sendMapMessage_presult__isset;

class MapComm_sendMapMessage_presult {
 public:


  virtual ~MapComm_sendMapMessage_presult() throw();
  bool* success;

  _MapComm_sendMapMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapComm_sendCarPose_args__isset {
  _MapComm_sendCarPose_args__isset() : car_pose(false) {}
  bool car_pose :1;
} _MapComm_sendCarPose_args__isset;

class MapComm_sendCarPose_args {
 public:

  MapComm_sendCarPose_args(const MapComm_sendCarPose_args&);
  MapComm_sendCarPose_args& operator=(const MapComm_sendCarPose_args&);
  MapComm_sendCarPose_args() {
  }

  virtual ~MapComm_sendCarPose_args() throw();
  CarMessage car_pose;

  _MapComm_sendCarPose_args__isset __isset;

  void __set_car_pose(const CarMessage& val);

  bool operator == (const MapComm_sendCarPose_args & rhs) const
  {
    if (!(car_pose == rhs.car_pose))
      return false;
    return true;
  }
  bool operator != (const MapComm_sendCarPose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapComm_sendCarPose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapComm_sendCarPose_pargs {
 public:


  virtual ~MapComm_sendCarPose_pargs() throw();
  const CarMessage* car_pose;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapComm_sendCarPose_result__isset {
  _MapComm_sendCarPose_result__isset() : success(false) {}
  bool success :1;
} _MapComm_sendCarPose_result__isset;

class MapComm_sendCarPose_result {
 public:

  MapComm_sendCarPose_result(const MapComm_sendCarPose_result&);
  MapComm_sendCarPose_result& operator=(const MapComm_sendCarPose_result&);
  MapComm_sendCarPose_result() : success(0) {
  }

  virtual ~MapComm_sendCarPose_result() throw();
  bool success;

  _MapComm_sendCarPose_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const MapComm_sendCarPose_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MapComm_sendCarPose_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapComm_sendCarPose_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapComm_sendCarPose_presult__isset {
  _MapComm_sendCarPose_presult__isset() : success(false) {}
  bool success :1;
} _MapComm_sendCarPose_presult__isset;

class MapComm_sendCarPose_presult {
 public:


  virtual ~MapComm_sendCarPose_presult() throw();
  bool* success;

  _MapComm_sendCarPose_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MapComm_sendThriftImage_args__isset {
  _MapComm_sendThriftImage_args__isset() : image(false) {}
  bool image :1;
} _MapComm_sendThriftImage_args__isset;

class MapComm_sendThriftImage_args {
 public:

  MapComm_sendThriftImage_args(const MapComm_sendThriftImage_args&);
  MapComm_sendThriftImage_args& operator=(const MapComm_sendThriftImage_args&);
  MapComm_sendThriftImage_args() {
  }

  virtual ~MapComm_sendThriftImage_args() throw();
  ThriftImage image;

  _MapComm_sendThriftImage_args__isset __isset;

  void __set_image(const ThriftImage& val);

  bool operator == (const MapComm_sendThriftImage_args & rhs) const
  {
    if (!(image == rhs.image))
      return false;
    return true;
  }
  bool operator != (const MapComm_sendThriftImage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapComm_sendThriftImage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MapComm_sendThriftImage_pargs {
 public:


  virtual ~MapComm_sendThriftImage_pargs() throw();
  const ThriftImage* image;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapComm_sendThriftImage_result__isset {
  _MapComm_sendThriftImage_result__isset() : success(false) {}
  bool success :1;
} _MapComm_sendThriftImage_result__isset;

class MapComm_sendThriftImage_result {
 public:

  MapComm_sendThriftImage_result(const MapComm_sendThriftImage_result&);
  MapComm_sendThriftImage_result& operator=(const MapComm_sendThriftImage_result&);
  MapComm_sendThriftImage_result() : success(0) {
  }

  virtual ~MapComm_sendThriftImage_result() throw();
  bool success;

  _MapComm_sendThriftImage_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const MapComm_sendThriftImage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MapComm_sendThriftImage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MapComm_sendThriftImage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MapComm_sendThriftImage_presult__isset {
  _MapComm_sendThriftImage_presult__isset() : success(false) {}
  bool success :1;
} _MapComm_sendThriftImage_presult__isset;

class MapComm_sendThriftImage_presult {
 public:


  virtual ~MapComm_sendThriftImage_presult() throw();
  bool* success;

  _MapComm_sendThriftImage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MapCommClient : virtual public MapCommIf {
 public:
  MapCommClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MapCommClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  void send_ping();
  void recv_ping();
  bool sendMapMessage(const MapMessage& map_complete);
  void send_sendMapMessage(const MapMessage& map_complete);
  bool recv_sendMapMessage();
  bool sendCarPose(const CarMessage& car_pose);
  void send_sendCarPose(const CarMessage& car_pose);
  bool recv_sendCarPose();
  bool sendThriftImage(const ThriftImage& image);
  void send_sendThriftImage(const ThriftImage& image);
  bool recv_sendThriftImage();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MapCommProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<MapCommIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MapCommProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMapMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendCarPose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendThriftImage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MapCommProcessor(::apache::thrift::stdcxx::shared_ptr<MapCommIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &MapCommProcessor::process_ping;
    processMap_["sendMapMessage"] = &MapCommProcessor::process_sendMapMessage;
    processMap_["sendCarPose"] = &MapCommProcessor::process_sendCarPose;
    processMap_["sendThriftImage"] = &MapCommProcessor::process_sendThriftImage;
  }

  virtual ~MapCommProcessor() {}
};

class MapCommProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MapCommProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< MapCommIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< MapCommIfFactory > handlerFactory_;
};

class MapCommMultiface : virtual public MapCommIf {
 public:
  MapCommMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<MapCommIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MapCommMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<MapCommIf> > ifaces_;
  MapCommMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<MapCommIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    ifaces_[i]->ping();
  }

  bool sendMapMessage(const MapMessage& map_complete) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMapMessage(map_complete);
    }
    return ifaces_[i]->sendMapMessage(map_complete);
  }

  bool sendCarPose(const CarMessage& car_pose) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendCarPose(car_pose);
    }
    return ifaces_[i]->sendCarPose(car_pose);
  }

  bool sendThriftImage(const ThriftImage& image) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendThriftImage(image);
    }
    return ifaces_[i]->sendThriftImage(image);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MapCommConcurrentClient : virtual public MapCommIf {
 public:
  MapCommConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MapCommConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ping();
  int32_t send_ping();
  void recv_ping(const int32_t seqid);
  bool sendMapMessage(const MapMessage& map_complete);
  int32_t send_sendMapMessage(const MapMessage& map_complete);
  bool recv_sendMapMessage(const int32_t seqid);
  bool sendCarPose(const CarMessage& car_pose);
  int32_t send_sendCarPose(const CarMessage& car_pose);
  bool recv_sendCarPose(const int32_t seqid);
  bool sendThriftImage(const ThriftImage& image);
  int32_t send_sendThriftImage(const ThriftImage& image);
  bool recv_sendThriftImage(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
